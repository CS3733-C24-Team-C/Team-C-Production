// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  //url      = "postgresql://teamc:teamc40@database.cs.wpi.edu:/teamcdb/?schema=teamc" //comment that connects to online db, only uncomment out if using online database
  url      = env("POSTGRES_URL")                                                       //if using online database, comment this line out
}

model Nodes {
  nodeID        String     @id
  xcoord        Int
  ycoord        Int
  floor         String
  building      String
  nodeType      NodeType
  longName      String
  shortName     String
  requests      Requests[] @relation("origin")
  destinationTo Requests[] @relation("destination")
}

model Edges {
  edgeID    String @id
  startNode String // foreign key watch out for seeding errors when making this a foreign key
  endNode   String // foreign key watch out for seeding errors when making this a foreign key
  weight    Float
}

enum NodeType {
  ELEV
  REST
  STAI
  DEPT
  LABS
  INFO
  CONF
  EXIT
  RETL
  SERV
  HALL
  BATH
}

model Employees {
  id        Int            @id @default(autoincrement())
  firstName String
  lastName  String
  username  String
  password  String
  role      EmployeeRole
  requests  Requests[]
  jobs      EmployeeJobs[]
}

model EmployeeJobs {
  employeeId Int
  job        EmployeeJob
  employee   Employees   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@id(name: "jobId", [employeeId, job]) // compound key
}

enum EmployeeJob {
  NULL // for use in generic users (such as admin)
  JANITOR
  DOCTOR
  NURSE
  OFFICE_ADMIN
}

enum EmployeeRole {
  ADMIN
  REGULAR
}

model Requests {
  id               Int           @id @default(autoincrement())
  nodeID           String
  employeeID       Int
  room             Nodes         @relation("origin", fields: [nodeID], references: [nodeID])
  employee         Employees     @relation(fields: [employeeID], references: [id], onDelete: Cascade)
  urgency          Urgency
  type             RequestType
  notes            String?
  completionStatus RequestStatus @default(UNASSIGNED)

  // Medicine Request
  medicineName   String?
  medicineDosage String?

  // Mechanical Request
  maintenanceType MaintenanceType?

  // Patient Relocation Request
  roomTo    String?
  newRoomID Nodes?  @relation("destination", fields: [roomTo], references: [nodeID])

  //Janitorial Request
  hazardousWaste   String?

  //Patient Consultation
  department       MedicalDepartment?
}

enum Urgency {
  LOW // low urgency
  MEDIUM // medium urgency
  HIGH // high urgency
  EMERGENCY // emergency urgency
}

enum RequestType {
  JANI // janitorial
  MECH // mechanical
  MEDI // medicinal
  RELC // patient relocation
  CONS // patient consultation
  CUST // custom request
}

enum RequestStatus {
  UNASSIGNED // unassigned
  ASSIGNED // assigned
  IN_PROGRESS // in progress
  COMPLETED // completed
}

enum MaintenanceType {
  ELEC // electrical
  PLUM // plumbing
  LOCK // locksmith
  TECH // technology
}

enum MedicalDepartment {
  NEURO // Neurological
  ORTHO // Orthopedics
  PEDIA // Pediatric
  CARDI // Cardiovascular
  ONCOL // Oncology
  INTER // Internal Medicine
}
